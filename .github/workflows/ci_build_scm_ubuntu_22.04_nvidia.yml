name: CI test to build the CCPP-SCM on ubuntu v22.04 using NVidia compilers

on: [push,pull_request,workflow_dispatch]

jobs:
  build_scm:

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        fortran-compiler: [nvfortran]
        build-type:       [Release]#, Debug]
        py-version:       [3.7.13]#, 3.9.12]

    # Environmental variables
    env:
      NFHOME:      /home/runner/netcdf-fortran
      NFVERSION:   v4.5.3
      bacio_ROOT:  /home/runner/bacio
      sp_ROOT:     /home/runner/NCEPLIBS-sp
      w3emc_ROOT:  /home/runner/myw3emc
      SCM_ROOT:    /home/runner/work/ccpp-scm/ccpp-scm
      NVHPC_SILENT: true
      NVHPC_INSTALL_TYPE: single
      NVHPC_INSTALL_DIR: /home/runner/nvidia
      suites:      SCM_RAP

    # Workflow steps
    steps:
#    - name: Clear caches
#      uses: easimon/wipe-cache@main
#      with:
#        dry-run: 'true'
    #######################################################################################
    # Initial
    #######################################################################################
    - name: Checkout SCM code (into /home/runner/work/ccpp-scm/)
      uses: actions/checkout@v3

    - name: Initialize submodules
      run: git submodule update --init --recursive

    #######################################################################################
    # Python setup
    #######################################################################################
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.py-version}}

    - name: Add conda to system path
      run: |
        echo $CONDA/bin >> $GITHUB_PATH

    - name: Install NetCDF Python libraries
      run: |
        conda install --yes -c conda-forge h5py>=3.4 netCDF4 f90nml

    - name: Update system packages
      run: sudo apt-get update

    #######################################################################################
    # Install Nvidia.
    #######################################################################################
    - name: cache-nvidia-compilers
      id: cache-nvidia-compilers
      if: contains(matrix.fortran-compiler, 'nvfortran')
      uses: actions/cache@v3
      with:
        path: /home/runner/hpc_sdk/
        key: cache-nvidia-compilers-${{matrix.fortran-compiler}}-key

    - name: Nvidia setup compilers
      if: contains(matrix.fortran-compiler, 'nvfortran') && steps.cache-nvidia-compilers.outputs.cache-hit != 'true'
      env:
        NVCOMPILERS: /home/runner/hpc_sdk
      run: |
         curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
         echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
         sudo apt-get update -y
         sudo apt-get install -y nvhpc-24-1

    #######################################################################################
    # Install FORTRAN dependencies
    #######################################################################################
    - name: Environment for nvidia compiler.
      env:
        NVCOMPILERS: /home/runner/hpc_sdk
      if: contains(matrix.fortran-compiler, 'nvfortran')
      run: |
        echo "CC=nvc"   >> $GITHUB_ENV
        echo "FC=nvfortran" >> $GITHUB_ENV
        echo "F90FLAGS=-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk" > $GITHUB_ENV
        echo "NFVERSION=v4.4.4" >> $GITHUB_ENV

#    - name: Cache bacio library v2.4.1
#      id: cache-bacio-fortran
#      uses: actions/cache@v3
#      with:
#        path: /home/runner/bacio
#        key: cache-bacio-fortran-${{matrix.fortran-compiler}}-key

    - name: Install bacio library v2.4.1
#      if: steps.cache-bacio-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.4.1 https://github.com/NOAA-EMC/NCEPLIBS-bacio.git bacio
        cd bacio && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${bacio_ROOT} ../
        make -j2
        make install
        echo "bacio_DIR=/home/runner/bacio/lib/cmake/bacio" >> $GITHUB_ENV

#    - name: Cache SP-library v2.3.3
#      id: cache-sp-fortran
#      uses: actions/cache@v3
#      with:
#        path: /home/runner/NCEPLIBS-sp
#        key: cache-sp-fortran-${{matrix.fortran-compiler}}-key

    - name: Install SP-library v2.3.3
#      if: steps.cache-sp-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.3.3 https://github.com/NOAA-EMC/NCEPLIBS-sp.git NCEPLIBS-sp
        cd NCEPLIBS-sp && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${sp_ROOT} ../
        make -j2
        make install
        echo "sp_DIR=/home/runner/NCEPLIBS-sp/lib/cmake/sp" >> $GITHUB_ENV

#    - name: Cache w3emc library v2.9.2
#      id: cache-w3emc-fortran
#      uses: actions/cache@v3
#      with:
#        path: /home/runner/myw3emc
#        key: cache-w3emc-fortran-${{matrix.fortran-compiler}}-key

    - name: Install w3emc library v2.9.2
#      if: steps.cache-w3emc-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.9.2 https://github.com/NOAA-EMC/NCEPLIBS-w3emc.git NCEPLIBS-w3emc
        cd NCEPLIBS-w3emc && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${w3emc_ROOT} ../
        make -j2
        make install
        echo "w3emc_DIR=/home/runner/myw3emc/lib/cmake/w3emc" >> $GITHUB_ENV
