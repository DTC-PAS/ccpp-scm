name: CI test to build the CCPP-SCM on ubuntu v22.04 using NVidia compilers

on: [push,pull_request,workflow_dispatch]

jobs:

  build_scm:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        fortran-compiler: [nvfortran]
        build-type:       [Release]#, Debug]
        enable-gpu-acc:   [False]#, True]
        py-version:       [3.7.13]#, 3.9.12]

    # Environmental variables
    env:
      NFHOME:      /home/runner/netcdf-fortran
      NCHOME:      /home/runner/netcdf
      NFVERSION:   v4.6.1
      bacio_ROOT:  /home/runner/bacio
      sp_ROOT:     /home/runner/NCEPLIBS-sp
      w3emc_ROOT:  /home/runner/myw3emc
      SCM_ROOT:    /home/runner/work/ccpp-scm/ccpp-scm
      zlib_ROOT:   /home/runner/zlib
      HDF5_ROOT:   /home/runner/hdf5
      suites:      SCM_RAP
      F90FLAGS:    -O3
      CC:          nvc
      FC:          nvfortran
      CMAKE_C_COMPILER: /home/runner/hpc_sdk/Linux_x86_64/24.1/compilers/bin/nvc
      CMAKE_Fortran_COMPILER: /home/runner/hpc_sdk/Linux_x86_64/24.1/compilers/bin/nvfortran

    # Workflow steps
    steps:

    #######################################################################################
    # Cleanup space
    #######################################################################################
    - name: Check space (pre)
      run: |
        df -h

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: false
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: false

    - name: Check space (post)
      run: |
        df -h

    #######################################################################################
    # Initial
    #######################################################################################
    - name: Checkout SCM code (into /home/runner/work/ccpp-scm/)
      uses: actions/checkout@v3

    - name: Initialize submodules
      run: git submodule update --init --recursive

    #######################################################################################
    # Python setup
    #######################################################################################
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.py-version}}

    - name: Add conda to system path
      run: |
        echo $CONDA/bin >> $GITHUB_PATH

    - name: Install NetCDF Python libraries
      run: |
        conda install --yes -c conda-forge h5py>=3.4 netCDF4 f90nml

#    - name: Update system packages
#      run: |
#        sudo apt-get update

    #######################################################################################
    # Install Nvidia.
    #######################################################################################
#    - name: Cache Nvidia HPC
#      id: cache-nvidia
#      uses: actions/cache@v3
#      with:
#        path: /home/runner/hpc_sdk
#        key: cache-nvidia-key

    - name: Nvidia setup compilers
#      if: steps.cache-nvidia.outputs.cache-hit != 'true'
      env:
        NVCOMPILERS: /home/runner/hpc_sdk
        NVARCH: Linux_x86_64
        NVHPC_SILENT: true
        NVHPC_INSTALL_DIR: /home/runner/hpc_sdk
        NVHPC_INSTALL_TYPE: network
        NVHPC_INSTALL_LOCAL_DIR: /home/runner/hpc_sdk
      run: |
        mkdir /home/runner/hpc_sdk && cd /home/runner/hpc_sdk
        wget -q https://developer.download.nvidia.com/hpc-sdk/24.1/nvhpc_2024_241_Linux_x86_64_cuda_12.3.tar.gz
        tar xpzf nvhpc_2024_241_Linux_x86_64_cuda_12.3.tar.gz
        nvhpc_2024_241_Linux_x86_64_cuda_12.3/install
        export PATH=${PATH}:${NVCOMPILERS}/${NVARCH}/24.1/compilers/bin
        export MANPATH=${MANPATH}:${NVCOMPILERS}/${NVARCH}/24.1/compilers/man
        echo "The nvfortran installed is:"
        nvfortran --version
        echo "The path to nvfortran is:"
        command -v nvfortran
        echo "Removing tarball"
        rm nvhpc_2024_241_Linux_x86_64_cuda_12.3.tar.gz

    #######################################################################################
    # Install FORTRAN dependencies
    #######################################################################################
    - name: Set environment for nvidia compiler.
      run: |
        echo "CC=/home/runner/hpc_sdk/Linux_x86_64/24.1/compilers/bin/nvc" >> $GITHUB_ENV
        echo "FC=/home/runner/hpc_sdk/Linux_x86_64/24.1/compilers/bin/nvfortran" >> $GITHUB_ENV
        echo "CMAKE_C_COMPILER=/home/runner/hpc_sdk/Linux_x86_64/24.1/compilers/bin/nvc" >> $GITHUB_ENV
        echo "CMAKE_Fortran_COMPILER=/home/runner/hpc_sdk/Linux_x86_64/24.1/compilers/bin/nvfortran" >> $GITHUB_ENV

    - name: Install zlib
      env:
        CFLAGS: -fPIC
      run: |
        wget https://github.com/madler/zlib/releases/download/v1.2.13/zlib-1.2.13.tar.gz
        tar -zxvf zlib-1.2.13.tar.gz
        cd zlib-1.2.13
        ./configure --prefix=${zlib_ROOT}
        make
        make install
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${zlib_ROOT}/lib

    - name: Install HDF5
      env:
        CPPFLAGS: -I${zlib_ROOT}/include
        LDFLAGS: -L${zlib_ROOT}/lib
      run: |
        wget https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-1_14_1-2.tar.gz
        tar -zxvf hdf5-1_14_1-2.tar.gz
        cd hdf5-hdf5-1_14_1-2
        ./configure --prefix=${HDF5_ROOT} --with-zlib=${zlib_ROOT}
        make -j4
        make install
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${HDF5_ROOT}/lib
        export PATH=${PATH}:${HDF5_ROOT}/lib

    - name: Install Curl
      run: |
        sudo apt-get install curl
        sudo apt-get install libssl-dev libcurl4-openssl-dev

    - name: Install NetCDF C library
      env:
        CPPFLAGS: -I${zlib_DIR}/include -I${HDF5_ROOT}/include
        LDFLAGS: -L${zlib_DIR}/lib -L${HDF5_ROOT}/lib
      run: |
        wget https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.7.4.tar.gz
        tar -zvxf v4.7.4.tar.gz
        cd netcdf-c-4.7.4
        ./configure --prefix=${NCHOME}
        make
        make install
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${NCHOME}/lib
        export PATH=${PATH}:${NCHOME}/lib
#        sudo apt-get update
#        sudo apt-get install libnetcdf-dev

    - name: Cache NetCDF Fortran library
      id: cache-netcdf-fortran
      uses: actions/cache@v3
      with:
        path: /home/runner/netcdf-fortran
        key: cache-netcdf-fortran-${{matrix.fortran-compiler}}-key

    - name: Install NetCDF Fortran library
      env:
        FCFLAGS: -fPIC
      if: steps.cache-netcdf-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch ${NFVERSION} https://github.com/Unidata/netcdf-fortran.git
        cd netcdf-fortran
        ./configure
        make -j
        sudo make install
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${NFHOME}/lib

    - name: Cache bacio library v2.4.1
      id: cache-bacio-fortran
      uses: actions/cache@v3
      with:
        path: /home/runner/bacio
        key: cache-bacio-fortran-${{matrix.fortran-compiler}}-key

    - name: Install bacio library v2.4.1
      if: steps.cache-bacio-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.4.1 https://github.com/NOAA-EMC/NCEPLIBS-bacio.git bacio
        cd bacio && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${bacio_ROOT} ../
        make -j2
        make install
        echo "bacio_DIR=/home/runner/bacio/lib/cmake/bacio" >> $GITHUB_ENV

    - name: Cache SP-library v2.3.3
      id: cache-sp-fortran
      uses: actions/cache@v3
      with:
        path: /home/runner/NCEPLIBS-sp
        key: cache-sp-fortran-${{matrix.fortran-compiler}}-key

    - name: Install SP-library v2.3.3
      if: steps.cache-sp-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.3.3 https://github.com/NOAA-EMC/NCEPLIBS-sp.git NCEPLIBS-sp
        cd NCEPLIBS-sp && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${sp_ROOT} ../
        make -j2
        make install
        echo "sp_DIR=/home/runner/NCEPLIBS-sp/lib/cmake/sp" >> $GITHUB_ENV

    - name: Cache w3emc library v2.9.2
      id: cache-w3emc-fortran
      uses: actions/cache@v3
      with:
        path: /home/runner/myw3emc
        key: cache-w3emc-fortran-${{matrix.fortran-compiler}}-key

    - name: Install w3emc library v2.9.2
      if: steps.cache-w3emc-fortran.outputs.cache-hit != 'true'
      run: |
        git clone --branch v2.9.2 https://github.com/NOAA-EMC/NCEPLIBS-w3emc.git NCEPLIBS-w3emc
        cd NCEPLIBS-w3emc && mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${w3emc_ROOT} ../
        make -j2
        make install
        echo "w3emc_DIR=/home/runner/myw3emc/lib/cmake/w3emc" >> $GITHUB_ENV

#    - name: Install Curl
#      run: |
#         sudo apt-get install curl
#         sudo apt-get install libssl-dev libcurl4-openssl-dev
#        sudo apt-get update
#        sudo apt-get install libcurl4-openssl-dev

    #######################################################################################
    # Build SCM.
    #######################################################################################

    - name: Configure build with CMake (Release)
      if: contains(matrix.build-type, 'Release')
      run: |
        cd ${SCM_ROOT}/scm
        mkdir bin && cd bin
        cmake -DCCPP_SUITES=${suites} ../src
#       if: contains(matrix.enable-gpu-acc, 'True')
#          cmake -DCCPP_SUITES=${suites} ../src -DENABLE_NVIDIA_OPENACC=True
#        else:
#           cmake -DCCPP_SUITES=${suites} ../src

    - name: Configure build with CMake (Debug)
      if: contains(matrix.build-type, 'Debug')
      run: |
        cd ${SCM_ROOT}/scm
        mkdir bin && cd bin
        cmake -DCCPP_SUITES=${suites} -DCMAKE_BUILD_TYPE=Debug ../src

    - name: Build SCM
      run: |
        cd ${SCM_ROOT}/scm/bin
        make -j4